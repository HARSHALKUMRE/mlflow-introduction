{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Documentations of MLFlow-Introduction Course","text":""},{"location":"#official-mlflow-documentation","title":"Official MLFlow Documentation","text":"<ul> <li>MLFlow.org</li> </ul>"},{"location":"#contents","title":"Contents","text":"Topic SubTopic     Section: 1 MLflow Introduction Introduction to MLflow    Installation and first trial of MLflow   Section: 2 MLflow Tracking Simple ML model    Logging our simple ML model using    Exploring UI of MLflow    Packaging a project MLflow way    MLflow tracking server"},{"location":"Section_001_MLFlow_Introduction/","title":"Section: 1 MLflow Introduction","text":""},{"location":"Section_001_MLFlow_Introduction/#introduction-to-mlflow","title":"Introduction to MLflow","text":""},{"location":"Section_001_MLFlow_Introduction/#what-is-mlflow","title":"What is MLflow?","text":"<p>MLflow is an open source platform for managing the machine learning lifecycle from start to finish.</p> <p>MLflow is organized into four components: Tracking, Projects, Models, and Model Registry.Each of these components can be used independently. That means we can still track the model\u2019s performance without exporting models in MLflow\u2019s model format.</p> <p>MLflow is designed to put as few constraints as possible and make codebase written in its format reproducible and reusable by multiple data scientists.</p>"},{"location":"Section_001_MLFlow_Introduction/#mlflow-components","title":"MLflow Components","text":""},{"location":"Section_001_MLFlow_Introduction/#installation-and-first-trial-of-mlflow","title":"Installation and first trial of MLflow","text":"<ul> <li>First create the conda environment by the following command -</li> </ul> <pre><code>conda create --prefix ./env python=3.7 -y\n</code></pre> <ul> <li>activate environment</li> </ul> <pre><code>conda actiavate ./env\n</code></pre> <ul> <li>To use MLflow as a Python library, install it using <code>pip</code>. You can install MLflow by running: </li> </ul> <pre><code>pip install mlflow\n</code></pre> <ul> <li>Create the files as mentioned in the github repo. Source code</li> </ul>"},{"location":"Section_002_MLFlow_Tracking/","title":"Section 2: MLFlow Tracking","text":""},{"location":"Section_002_MLFlow_Tracking/#simple-ml-model-","title":"Simple ML model -","text":"<p>We have implemented a simple ml model to showcase the experiment tracking concept using in MLFlow-</p>"},{"location":"Section_002_MLFlow_Tracking/#source-code","title":"Source code","text":"simple_ML_model.py <pre><code>import os\nimport argparse\nimport pandas as pd\nimport numpy as np\n\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import ElasticNet\nfrom urllib.parse import urlparse\nimport mlflow\nimport mlflow.sklearn\n\n\ndef get_data():\n    URL = \"http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv\"\n\n    try:\n        df = pd.read_csv(URL, sep=\";\")\n        return df\n    except Exception as e:\n        raise e\n\ndef evaluate(actual, pred):\n    rmse = np.sqrt(mean_squared_error(actual, pred))\n    mae = mean_absolute_error(actual, pred)\n    r2 = r2_score(actual, pred)\n    return rmse, mae, r2\n\ndef main(alpha, l1_ratio):\n\n    df = get_data()\n\n    train, test = train_test_split(df)\n\n    train_x = train.drop([\"quality\"], axis=1)\n    test_x = test.drop([\"quality\"], axis=1)\n\n    train_y = train[[\"quality\"]]\n    test_y = test[[\"quality\"]]\n\n    # mlflow \n    with mlflow.start_run():\n        lr = ElasticNet(alpha=alpha, l1_ratio=l1_ratio, random_state=42)\n        lr.fit(train_x, train_y)\n\n        pred = lr.predict(test_x)\n\n        rmse, mae, r2 = evaluate(test_y, pred)\n\n        print(f\"Elastic net params: alpha: {alpha}, l1_ratio: {l1_ratio}\")\n        print(f\"Elastic net metric: rmse:{rmse}, mae: {mae}, r2:{r2}\")\n\n        mlflow.log_param(\"alpha\", alpha)\n        mlflow.log_param(\"l1_ratio\", l1_ratio)\n\n        mlflow.log_metric(\"rmse\", rmse)\n        mlflow.log_metric(\"mae\", mae)\n        mlflow.log_metric(\"r2\", r2)\n\n\nif __name__==\"__main__\":\n    args = argparse.ArgumentParser()\n    args.add_argument(\"--alpha\", \"-a\", type=float, default=0.5)\n    args.add_argument(\"--l1_ratio\", \"-l1\", type=float, default=0.5)\n    parsed_args = args.parse_args()\n    try:\n        main(alpha=parsed_args.alpha, l1_ratio=parsed_args.l1_ratio)\n    except Exception as e:\n        raise e\n</code></pre>  <ul> <li>Source repository - Click here</li> </ul>"},{"location":"Section_002_MLFlow_Tracking/#concept-of-runs","title":"Concept of Runs","text":"<p>MLflow Tracking is based on runs. Runs are executions of some piece of data science code. A Run can record the following :</p> <ul> <li>Code Version </li> <li>Start &amp; End Time</li> <li>Source</li> <li>Parameters</li> <li>Metrics</li> <li>Artifacts</li> </ul>"},{"location":"Section_002_MLFlow_Tracking/#logging-our-simple-ml-model-using","title":"Logging our simple ML model using","text":"<p>In this lecture it has been shown that how we can log our model for every execution or experiment-</p>"},{"location":"Section_002_MLFlow_Tracking/#source-code_1","title":"Source code","text":"simple_ML_model_2.py <pre><code>import os\nimport argparse\nimport pandas as pd\nimport numpy as np\n\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import ElasticNet\nfrom urllib.parse import urlparse\nimport mlflow\nimport mlflow.sklearn\n\n\ndef get_data():\n    URL = \"http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv\"\n\n    try:\n        df = pd.read_csv(URL, sep=\";\")\n        return df\n    except Exception as e:\n        raise e\n\ndef evaluate(actual, pred):\n    rmse = np.sqrt(mean_squared_error(actual, pred))\n    mae = mean_absolute_error(actual, pred)\n    r2 = r2_score(actual, pred)\n    return rmse, mae, r2\n\ndef main(alpha, l1_ratio):\n\n    df = get_data()\n\n    train, test = train_test_split(df)\n\n    train_x = train.drop([\"quality\"], axis=1)\n    test_x = test.drop([\"quality\"], axis=1)\n\n    train_y = train[[\"quality\"]]\n    test_y = test[[\"quality\"]]\n\n    # mlflow \n    with mlflow.start_run():\n        lr = ElasticNet(alpha=alpha, l1_ratio=l1_ratio, random_state=42)\n        lr.fit(train_x, train_y)\n\n        pred = lr.predict(test_x)\n\n        rmse, mae, r2 = evaluate(test_y, pred)\n\n        print(f\"Elastic net params: alpha: {alpha}, l1_ratio: {l1_ratio}\")\n        print(f\"Elastic net metric: rmse:{rmse}, mae: {mae}, r2:{r2}\")\n\n        mlflow.log_param(\"alpha\", alpha)\n        mlflow.log_param(\"l1_ratio\", l1_ratio)\n\n        mlflow.log_metric(\"rmse\", rmse)\n        mlflow.log_metric(\"mae\", mae)\n        mlflow.log_metric(\"r2\", r2)\n\n        # mlflow model logging \n        mlflow.sklearn.log_model(lr, \"model\")\n\n\nif __name__==\"__main__\":\n    args = argparse.ArgumentParser()\n    args.add_argument(\"--alpha\", \"-a\", type=float, default=0.5)\n    args.add_argument(\"--l1_ratio\", \"-l1\", type=float, default=0.5)\n    parsed_args = args.parse_args()\n    try:\n        main(alpha=parsed_args.alpha, l1_ratio=parsed_args.l1_ratio)\n    except Exception as e:\n        raise e\n</code></pre>"},{"location":"Section_002_MLFlow_Tracking/#exploring-ui-of-mlflow","title":"Exploring UI of MLflow","text":"runs.py <pre><code>import numpy as np\nimport os\n\nalpha_s=np.linspace(0.1, 1.0, 5)\nl1_ratios=np.linspace(0.1, 1.0, 5)\n\nfor alpha in alpha_s:\nfor l1 in l1_ratios:\n    os.system(f\"python simple_ML_model_2.py -a {alpha} -l1 {l1}\")\n</code></pre>   <p>Info</p> <p>Refer video lecture for this in oneNeuron platform for UI exploration</p>"},{"location":"Section_002_MLFlow_Tracking/#packaging-a-project-mlflow-way","title":"Packaging a project MLflow way","text":"<ul> <li> <p>Create a <code>conda.yaml</code> file as shown below:</p>  conda.yaml <pre><code>name: mlflow_tutorial\nchannels:\n    - defaults\ndependencies:\n    - python=3.7.11=h6244533_0\n    - pip=21.2.4=py37haa95532_0\n    - pip:\n        - mlflow==1.23.1\n        - numpy==1.21.5\n        - pandas==1.3.5\n        - scikit-learn==1.0.2\n</code></pre>  </li> <li> <p>or run the following command to create conda.yaml file     <pre><code>conda env export &gt; conda.yaml\n</code></pre></p>  <p>Note</p> <p>make sure you are in the same environment while running the command whose conda.yaml file you wish to create</p>  </li> <li> <p>after above step create the an <code>MLproject</code> file in the root of the project as shown below -</p>  MLproject <pre><code>name: mlflow_tutorial\n\nconda_env: conda.yaml\n\nentry_points:\n    main:\n        parameters:\n            alpha: {type: float, default: 0.5}\n            l1_ratio: {type: float, default: 0.5}\n        command: \"python simple_ML_model_2.py -a {alpha} -l1 {l1_ratio}\"\n</code></pre>  </li> <li> <p>Now run the following command to execte the project</p> <ul> <li>without using a fresh conda environment by using the existing environment-     <pre><code>mlflow run . --no-conda \n</code></pre></li> <li>with a fresh conda environment -     <pre><code>mlflow run . \n</code></pre></li> <li>if you wish to pass command line argument then use the below command-     <pre><code>mlflow run . -P alpha=0.7 -P l1_ratio=0.4\n</code></pre></li> </ul> </li> <li> <p>source code for the above demo - source code</p> </li> </ul>"},{"location":"Section_002_MLFlow_Tracking/#mlflow-tracking-server","title":"MLflow tracking server","text":"<ul> <li> <p>make the changes in the code base to be ready for tracking server -</p>  code <pre><code>import os\nimport argparse\nimport pandas as pd\nimport numpy as np\n\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import ElasticNet\nfrom urllib.parse import urlparse\nimport mlflow\nimport mlflow.sklearn\n\n\ndef get_data():\n    URL = \"http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv\"\n\n    try:\n        df = pd.read_csv(URL, sep=\";\")\n        return df\n    except Exception as e:\n        raise e\n\ndef evaluate(actual, pred):\n    rmse = np.sqrt(mean_squared_error(actual, pred))\n    mae = mean_absolute_error(actual, pred)\n    r2 = r2_score(actual, pred)\n    return rmse, mae, r2\n\ndef main(alpha, l1_ratio, tracking_uri, port):\n\n    df = get_data()\n\n    train, test = train_test_split(df)\n\n    train_x = train.drop([\"quality\"], axis=1)\n    test_x = test.drop([\"quality\"], axis=1)\n\n    train_y = train[[\"quality\"]]\n    test_y = test[[\"quality\"]]\n\n    # mlflow tracking URI\n    URI = f\"http://{tracking_uri}:{port}\"\n    mlflow.set_tracking_uri(URI)\n\n    # mlflow \n    with mlflow.start_run():\n        lr = ElasticNet(alpha=alpha, l1_ratio=l1_ratio, random_state=42)\n        lr.fit(train_x, train_y)\n\n        pred = lr.predict(test_x)\n\n        rmse, mae, r2 = evaluate(test_y, pred)\n\n        print(f\"Elastic net params: alpha: {alpha}, l1_ratio: {l1_ratio}\")\n        print(f\"Elastic net metric: rmse:{rmse}, mae: {mae}, r2:{r2}\")\n\n        mlflow.log_param(\"alpha\", alpha)\n        mlflow.log_param(\"l1_ratio\", l1_ratio)\n\n        mlflow.log_metric(\"rmse\", rmse)\n        mlflow.log_metric(\"mae\", mae)\n        mlflow.log_metric(\"r2\", r2)\n\n        # register model in the sql server\n        mlflow.sklearn.log_model(lr, \"model\", registered_model_name=\"ENmodel\")\n\n\nif __name__==\"__main__\":\n    args = argparse.ArgumentParser()\n    args.add_argument(\"--alpha\", \"-a\", type=float, default=0.5)\n    args.add_argument(\"--l1_ratio\", \"-l1\", type=float, default=0.5)\n    args.add_argument(\"--tracking_uri\", \"-t\", type=str, default=\"localhost\")\n    args.add_argument(\"--port\", \"-p\", type=int, default=5000)\n    parsed_args = args.parse_args()\n    try:\n        main(alpha=parsed_args.alpha, l1_ratio=parsed_args.l1_ratio,\n        tracking_uri=parsed_args.tracking_uri, port=parsed_args.port)\n\n    except Exception as e:\n        raise e\n</code></pre>  </li> <li> <p>run mlflow sqlite server to store parameters and metrics in an sqlite local database and create artifact directory to store files </p> <pre><code>mlflow server \\\n--backend-store-uri sqlite:///mlflow.db \\\n--default-artifact-root ./artifacts \\\n--host 0.0.0.0 -p 1234\n</code></pre>  Info <p>To create command using conda env file [an alternative to pip install -r requirements.txt]</p> <pre><code>conda env create --prefix ./env -f conda.yaml\n</code></pre>  </li> </ul>"}]}